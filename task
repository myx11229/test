github 建一个项目
要求：
通过 Ethereum public RPC，实现实时同步当前区块信息，在配置文件中设定起始区块高度，从这个高度起，每当产出一个新的区块，就读取最新区块的详细数据，将区块数据存入 mysql 数据库供后续查询，鉴于 区块信息内 transactions 数组非常大，这一字段只保存前 N 比交易，代码中设置这个常量为 5。对于 block 内的全部 tx，逐一检查交易的发送者，按照每个地址的首字母进行分类，该数据具体用途见后文。
实现数据同步程序后，需要对外输出 api，需要有如下接口：
1. 输出系统当前已经完成同步了的区块高度；
2. 根据请求的区块高度，从数据库返回该区块的数据，要求相关数字类型的原十六进制字段必须以十进制方式返回，例如原本的 "gasLimit": "0x1c9c380”, 从接口返回是 "gasLimit": "30000000”, 对于 timestamp，除了按照十进制返回外，额外返回 timestamp_readable 字段，该字段内容为 yyyy-MM-dd hh:mm:ss 格式的时间字符串；
3. 输出分类后的地址数据，具体要求：调用接口后，返回当前时刻起，半小时内，各类地址的交易发送量，比如 0xa: 12, 0xb: 3, 0xc: 88 等，返回格式需要类似键值对，一行一个数据；该接口无参数输入；注意，该数据不是系统启动后从零开始统计，因此，当系统运行一段时间后，重启系统，该半小时数据不能丢失；
4. 输出分类后的地址数据，具体要求：调用接口后，返回当前时刻起，一小时内，各类地址的交易发送量，比如 0xa: 12, 0xb: 3, 0xc: 88 等，返回格式需要类似键值对，一行一个数据；该接口无参数输入；
5. 输出自系统运行以来，以首字母作为区分的各类地址的总的交易发送量，一行一条数据；
 
注意：
* code review 将只通过 git pull 方式拉取代码。
* 通过该项目熟悉 Ethereum RPC list 及其具体数据字段；
* 考察 mysql 基本入门，go gonic 框架基本入门，golang 项目结构基本入门；
* 考察接口命名规范，项目结构命名规范，变量命名规范，函数/模块命名规范，代码冗余程度，代码容错程度，bug 数量；
* 考察 git 基本技能；

可以借助的第三方库：
* https://github.com/spf13/viper
* https://github.com/gin-gonic/gin

使用该 Ethereum Mainnet RPC:
https://mainnet.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161

